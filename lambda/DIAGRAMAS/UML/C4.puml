@startuml  
title C4 - Level 4 - Alexa Biblioteca Skill - Code Diagram

' ==================== ENUMS ====================
enum BookStatus {
    DISPONIBLE : "disponible"
    PRESTADO : "prestado"
}

' ==================== DOMAIN MODELS ====================
class Book {
    - id: str
    - titulo: str
    - autor: str
    - tipo: str
    - estado: BookStatus

    + to_dict() : dict
    + from_dict(data: dict) : Book
    + __str__() : str
}

class Prestamo {
    - libro_id: str
    - a: str

    + to_dict() : dict
    + from_dict(data: dict) : Prestamo
    + __str__() : str
}

' ==================== INTERFACES ====================
interface ISessionStorage {
  + get_state(event) : Dict[str, Any]
  + save_state(event, state: Dict[str, Any]) : None
}

interface IBookOperations {
  + add_book(state: Dict, titulo: str, autor: str, tipo: str) : Tuple[bool, Union[str, Book]]
  + list_books(state: Dict) : List[Book]
  + search_books(state: Dict, termino: str) : List[Book]
  + delete_book(state: Dict, titulo: str, libro_id: str) : Tuple[bool, Union[str, Book]]
}

interface ILoanOperations {
  + borrow_book(state: Dict, libro_or_title: str, persona: str) : Tuple[bool, str]
  + return_book(state: Dict, libro_or_title: str) : Tuple[bool, str]
}

' ==================== DATA LAYER ====================
class DatabaseHelper {
  + get_state(event) : Dict[str, Any]
  - _get_initial_state() : Dict[str, Any]
  - _validate_state(state: Dict) : Dict[str, Any]
}

class SessionState {
  + libros: List[Book]
  + prestamos: List[Prestamo]
  + devueltos: List[Prestamo]
  + __await__: Optional[str]
  
  + get_libros() : List[Book]
  + add_libro(libro: Book) : None
  + remove_libro(libro_id: str) : bool
  + clear() : None
}

' ==================== SERVICES ====================
class BibliotecaService {
  + add_book(state: Dict, titulo: str, autor: Optional[str], tipo: Optional[str]) : Tuple[bool, Union[str, Book]]
  + list_books(state: Dict) : List[Book]
  + search_books(state: Dict, termino: str) : List[Book]
  + delete_book(state: Dict, titulo: Optional[str], libro_id: Optional[str]) : Tuple[bool, Union[str, Book]]
  + borrow_book(state: Dict, libro_or_title: str, persona: Optional[str]) : Tuple[bool, str]
  + return_book(state: Dict, libro_or_title: str) : Tuple[bool, str]
  - _next_id(state: Dict) : str
  - _find_book(state: Dict, libro_id: str, titulo: str) : Optional[Book]
  - _is_book_loaned(state: Dict, libro_id: str) : bool
}

' ==================== UTILITIES ====================
class Utils {
  + norm(s: str) : str
}

' ==================== LAMBDA HANDLER ====================
class LambdaFunction {
  - _ROUTES: Dict[str, str]
  
  + lambda_handler(event, context) : Dict[str, Any]
  - _say(text: str, reprompt: str, end: bool, session: Dict) : Dict[str, Any]
  - _load_handler(intent_name: str) : Callable
  - _get_state(event: Dict) : Dict[str, Any]
}

' ==================== INTENT HANDLERS ====================
abstract class BaseHandler {
  # _slot(event: Dict, name: str) : Optional[str]
  + {abstract} handle(event: Dict, state: Dict) : Tuple[str, str]
}

class AgregarLibroHandler {
  - _slot(event: Dict, name: str) : Optional[str]
  + handle(event: Dict, state: Dict) : Tuple[str, str]
  - _validate_titulo(titulo: str) : bool
  - _request_titulo(state: Dict) : Tuple[str, str]
}

class ListarLibrosHandler {
  - _slot(event: Dict, name: str) : Optional[str]
  + handle(event: Dict, state: Dict) : Tuple[str, str]
  - _format_book_list(libros: List[Book], max_items: int) : str
}

class BuscarLibroHandler {
  - _slot(event: Dict, name: str) : Optional[str]
  + handle(event: Dict, state: Dict) : Tuple[str, str]
  - _format_search_results(resultados: List[Book]) : str
}

class EliminarLibroHandler {
  - _slot(event: Dict, name: str) : Optional[str]
  + handle(event: Dict, state: Dict) : Tuple[str, str]
  - _validate_deletion(state: Dict, libro_id: str) : bool
  - _request_titulo(state: Dict) : Tuple[str, str]
}

class PrestarLibroHandler {
  - _slot(event: Dict, name: str) : Optional[str]
  + handle(event: Dict, state: Dict) : Tuple[str, str]
  - _validate_loan(libro: Book) : bool
  - _request_libro(state: Dict) : Tuple[str, str]
}

class DevolverLibroHandler {
  - _slot(event: Dict, name: str) : Optional[str]
  + handle(event: Dict, state: Dict) : Tuple[str, str]
  - _validate_return(state: Dict, libro_id: str) : bool
  - _request_libro(state: Dict) : Tuple[str, str]
}

class ConsultarPrestamosHandler {
  - _slot(event: Dict, name: str) : Optional[str]
  + handle(event: Dict, state: Dict) : Tuple[str, str]
  - _format_prestamos(prestamos: List[Prestamo]) : str
}

class ConsultarDevueltosHandler {
  - _slot(event: Dict, name: str) : Optional[str]
  + handle(event: Dict, state: Dict) : Tuple[str, str]
  - _format_devueltos(devueltos: List[Prestamo]) : str
}

class DecirTituloHandler {
  - _slot(event: Dict, name: str) : Optional[str]
  + handle(event: Dict, state: Dict) : Tuple[str, str]
  - _handle_agregar_context(event: Dict, state: Dict, titulo: str) : Tuple[str, str]
  - _handle_eliminar_context(event: Dict, state: Dict, titulo: str) : Tuple[str, str]
  - _handle_no_context(titulo: str) : Tuple[str, str]
}

class LimpiarCacheHandler {
  - _slot(event: Dict, name: str) : Optional[str]
  + handle(event: Dict, state: Dict) : Tuple[str, str]
}

class HelpHandler {
  - _slot(event: Dict, name: str) : Optional[str]
  + handle(event: Dict, state: Dict) : Tuple[str, str]
}

class StopHandler {
  - _slot(event: Dict, name: str) : Optional[str]
  + handle(event: Dict, state: Dict) : Tuple[str, str]
}

class FallbackHandler {
  - _slot(event: Dict, name: str) : Optional[str]
  + handle(event: Dict, state: Dict) : Tuple[str, str]
}

class SiguientePaginaHandler {
  - _slot(event: Dict, name: str) : Optional[str]
  + handle(event: Dict, state: Dict) : Tuple[str, str]
}

class SalirListadoHandler {
  - _slot(event: Dict, name: str) : Optional[str]
  + handle(event: Dict, state: Dict) : Tuple[str, str]
}

' ==================== RELATIONSHIPS ====================

' Interface implementations
DatabaseHelper ..|> ISessionStorage
BibliotecaService ..|> IBookOperations
BibliotecaService ..|> ILoanOperations

' Lambda Function relationships
LambdaFunction --> DatabaseHelper : uses
LambdaFunction ..> AgregarLibroHandler : loads
LambdaFunction ..> ListarLibrosHandler : loads
LambdaFunction ..> BuscarLibroHandler : loads
LambdaFunction ..> EliminarLibroHandler : loads
LambdaFunction ..> PrestarLibroHandler : loads
LambdaFunction ..> DevolverLibroHandler : loads
LambdaFunction ..> ConsultarPrestamosHandler : loads
LambdaFunction ..> ConsultarDevueltosHandler : loads
LambdaFunction ..> DecirTituloHandler : loads
LambdaFunction ..> LimpiarCacheHandler : loads
LambdaFunction ..> HelpHandler : loads
LambdaFunction ..> StopHandler : loads
LambdaFunction ..> FallbackHandler : loads
LambdaFunction ..> SiguientePaginaHandler : loads
LambdaFunction ..> SalirListadoHandler : loads

' Handler inheritance
AgregarLibroHandler --|> BaseHandler
ListarLibrosHandler --|> BaseHandler
BuscarLibroHandler --|> BaseHandler
EliminarLibroHandler --|> BaseHandler
PrestarLibroHandler --|> BaseHandler
DevolverLibroHandler --|> BaseHandler
ConsultarPrestamosHandler --|> BaseHandler
ConsultarDevueltosHandler --|> BaseHandler
DecirTituloHandler --|> BaseHandler
LimpiarCacheHandler --|> BaseHandler
HelpHandler --|> BaseHandler
StopHandler --|> BaseHandler
FallbackHandler --|> BaseHandler
SiguientePaginaHandler --|> BaseHandler
SalirListadoHandler --|> BaseHandler

' Handler to Service dependencies
AgregarLibroHandler --> BibliotecaService : uses add_book()
ListarLibrosHandler --> BibliotecaService : uses list_books()
BuscarLibroHandler --> BibliotecaService : uses search_books()
EliminarLibroHandler --> BibliotecaService : uses delete_book()
PrestarLibroHandler --> BibliotecaService : uses borrow_book()
DevolverLibroHandler --> BibliotecaService : uses return_book()
DecirTituloHandler --> BibliotecaService : uses add_book(), delete_book()

' Handler to State dependencies
AgregarLibroHandler --> SessionState : modifies
ListarLibrosHandler --> SessionState : reads
BuscarLibroHandler --> SessionState : reads
EliminarLibroHandler --> SessionState : modifies
PrestarLibroHandler --> SessionState : modifies
DevolverLibroHandler --> SessionState : modifies
ConsultarPrestamosHandler --> SessionState : reads
ConsultarDevueltosHandler --> SessionState : reads
DecirTituloHandler --> SessionState : modifies
LimpiarCacheHandler --> SessionState : clears

' Service to Utils and State
BibliotecaService --> Utils : uses norm()
BibliotecaService --> SessionState : reads/writes

' DatabaseHelper to SessionState
DatabaseHelper --> SessionState : creates/manages

' Model relationships
SessionState *-- Book : contains
SessionState *-- Prestamo : contains
Book --> BookStatus : uses
Prestamo --> Book : references by libro_id

' Notes
note right of LambdaFunction
  Entry point for all Alexa requests.
  Routes intents to appropriate handlers
  using the _ROUTES dictionary.
end note

note right of BibliotecaService
  Core business logic layer.
  Handles all CRUD operations for books,
  loans, and returns. Uses Utils for
  text normalization.
end note

note right of SessionState
  In-memory state storage using
  Alexa sessionAttributes.
  Persists between intents within
  the same session.
end note

note right of DecirTituloHandler
  Context-aware handler that processes
  title input based on conversation state
  (__await__ flag in SessionState).
end note

@enduml